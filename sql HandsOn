--create a table
-- Create Departments table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50) NOT NULL
);

-- Create Employees table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- Create Projects table
CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    ProjectName VARCHAR(100),
    Budget DECIMAL(15,2)
);

-- Many-to-many relation between Employees and Projects
CREATE TABLE EmployeeProjects (
    EmployeeID INT,
    ProjectID INT,
    AssignedDate DATE,
    PRIMARY KEY (EmployeeID, ProjectID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID)
);

-- Insert sample data into Departments
INSERT INTO Departments VALUES
(1, 'HR'),
(2, 'Finance'),
(3, 'IT'),
(4, 'Marketing');

-- Insert sample data into Employees
INSERT INTO Employees VALUES
(101, 'Alice', 'Johnson', 29, 3),
(102, 'Bob', 'Smith', 35, 2),
(103, 'Carol', 'Williams', 26, 3),
(104, 'David', 'Brown', 42, 1),
(105, 'Eve', 'Davis', 31, 4);

-- Insert sample data into Projects
INSERT INTO Projects VALUES
(201, 'Website Redesign', 150000.00),
(202, 'Mobile App', 100000.00),
(203, 'Cloud Migration', 250000.00);

-- Insert sample data into EmployeeProjects
INSERT INTO EmployeeProjects VALUES
(101, 201, '2023-05-10'),
(101, 202, '2023-06-15'),
(102, 203, '2023-01-20'),
(103, 202, '2023-07-01'),
(105, 201, '2023-03-12');




2. Practice Queries
a) Basic Select & Filter
sql
Copy
Edit
-- List all employees with their department name
SELECT e.FirstName, e.LastName, d.DepartmentName
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID;

-- Find employees older than 30
SELECT * FROM Employees WHERE Age > 30;


b) Aggregation & Grouping
sql
Copy
Edit
-- Count employees in each department
SELECT d.DepartmentName, COUNT(*) AS EmployeeCount
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID
GROUP BY d.DepartmentName;

-- Total budget assigned to projects for each department's employees
SELECT d.DepartmentName, SUM(p.Budget) AS TotalProjectBudget
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID
JOIN EmployeeProjects ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects p ON ep.ProjectID = p.ProjectID
GROUP BY d.DepartmentName;



c) Subqueries
sql
Copy
Edit
-- Find employees working on projects with budget > 120000
SELECT FirstName, LastName FROM Employees
WHERE EmployeeID IN (
    SELECT EmployeeID FROM EmployeeProjects ep
    JOIN Projects p ON ep.ProjectID = p.ProjectID
    WHERE p.Budget > 120000
);


d) Window Functions
sql
Copy
Edit
-- Rank employees by age within each department
SELECT FirstName, LastName, DepartmentID, Age,
       RANK() OVER (PARTITION BY DepartmentID ORDER BY Age DESC) AS AgeRank
FROM Employees;



e) CTE & Recursive Query
sql
Copy
Edit
-- With CTE: Count employees per department with more than 1 employee
WITH DeptCounts AS (
    SELECT DepartmentID, COUNT(*) AS EmployeeCount
    FROM Employees
    GROUP BY DepartmentID
)
SELECT d.DepartmentName, dc.EmployeeCount
FROM DeptCounts dc
JOIN Departments d ON dc.DepartmentID = d.DepartmentID
WHERE dc.EmployeeCount > 1;
3. Transaction and Stored Procedure Example (SQL Server syntax)
sql
Copy
Edit
-- Simple transaction example: Increase budget by 10% for IT department projects
BEGIN TRANSACTION;

UPDATE p
SET Budget = Budget * 1.10
FROM Projects p
JOIN EmployeeProjects ep ON p.ProjectID = ep.ProjectID
JOIN Employees e ON ep.EmployeeID = e.EmployeeID
WHERE e.DepartmentID = 3;

COMMIT;

-- Stored procedure to get employees by department
CREATE PROCEDURE GetEmployeesByDepartment
    @DeptID INT
AS
BEGIN
    SELECT FirstName, LastName, Age FROM Employees WHERE DepartmentID = @DeptID;
END;
